{
    "collab_server" : "",
    "contents" : "#' Convert precision to SD\n#'\n#' @param prec a precision density\n#' @param internal logical indicating whether this is an internal representation\n#'\n#' @return an SD density\n#' @export\nbri.hyper.sd = function(prec,internal=FALSE){\n  if(internal){\n    inla.tmarginal(function(x) 1/sqrt(exp(x)),prec)\n  }else{\n    inla.tmarginal(function(x) 1/sqrt(x), prec)\n  }\n}\n\n#' Compute a summary from a density\n#'\n#' @param dens a density\n#'\n#' @return numerical summary\n#' @export\nbri.density.summary = function(dens){\n  m = inla.emarginal(function(xx) c(xx, xx^2), dens)\n  q = inla.qmarginal(c(0.025, 0.5, 0.975), dens)\n  s = sqrt(max(0, m[2] - m[1]^2))\n  md = inla.mmarginal(dens)\n  c(mean = m[1], sd = s, q0.025 = q[1], q0.5 = q[2], q0.975 = q[3],mode=md)\n}\n\n#' Convert precisions to SD in INLA hyperparameter summary\n#'\n#' @param inla model object\n#'\n#' @return summary of hyperparameters on SD scale (where appropriate)\n#' @export\nbri.hyperpar.summary = function(r){\n  irp = r$internal.marginals.hyperpar\n  hrp = r$marginals.hyperpar\n  hypnames = names(irp)\n  iip = grep(\"precision\",hypnames)\n  for(i in 1:length(irp)){\n    if(i %in% iip){\n      irp[[i]] = bri.hyper.sd(irp[[i]],internal=TRUE)\n    }else{\n      irp[[i]] = hrp[[i]]\n      hypnames[i] = names(hrp)[i]\n    }\n  }\n  ts = t(sapply(irp,bri.density.summary))\n  hypnames = sub(\"Log precision\",\"SD\",hypnames)\n  row.names(ts) = hypnames\n  ts\n}\n\n#' Plot the hyperparameter posteriors\n#'\n#' @param r an INLA model object\n#' @param together TRUE if densities to be plotted on a single panel\n#'\n#' @return data frame containing the densities\n#' @export\nbri.hyperpar.plot = function(r,together=TRUE){\n  irp = r$internal.marginals.hyperpar\n  hrp = r$marginals.hyperpar\n  hypnames = names(irp)\n  iip = grep(\"precision\",hypnames)\n  for(i in 1:length(irp)){\n    if(i %in% iip){\n      irp[[i]] = bri.hyper.sd(irp[[i]],internal=TRUE)\n    }else{\n      irp[[i]] = hrp[[i]]\n      hypnames[i] = names(hrp)[i]\n    }\n  }\n  hypnames = sub(\"Log precision\",\"SD\",hypnames)\n  hypnames = sub(\"the Gaussian observations\",\"error\",hypnames)\n  names(irp) = hypnames\n  cf = data.frame(do.call(rbind,irp))\n  cf$parameter = rep(hypnames,times=sapply(irp,nrow))\n  if(together){\n    p=ggplot(cf,aes(x=x,y=y,linetype=parameter))+geom_line()+ylab(\"density\")+xlab(\"\")\n    print(p)\n  }else{\n    p=ggplot(cf,aes(x=x,y=y))+geom_line()+facet_wrap(~parameter,scales=\"free\")+ylab(\"density\")+xlab(\"\")\n    print(p)\n  }\n  invisible(cf)\n}\n\n#' Plot the posterior densities of the random effects\n#'\n#' @param r inla model object\n#'\n#' @return a data frame with the densities and group labels\n#' @export\nbri.random.plot = function(r){\n  reff <- r$marginals.random\n  irp = reff[[1]]\n  cf = data.frame(do.call(rbind,irp))\n  cf$group = rep(as.character(1:length(irp)),times=sapply(irp,nrow))\n  p=ggplot(cf,aes(x=x,y=y,linetype=group))+geom_line()+ylab(\"density\")+xlab(\"\")\n  print(p)\n  invisible(cf)\n}\n\n#' Plot posterior densities of the fixed effects\n#'\n#' @param r an inla model object\n#'\n#' @return a data frame containing the densities and parameter labels (invisible)\n#' @export\nbri.fixed.plot = function(r, together=FALSE){\n  rmf = r$marginals.fixed\n  cf = data.frame(do.call(rbind, rmf))\n  cf$parameter = rep(names(rmf),times=sapply(rmf,nrow))\n  if(together){\n    p=ggplot(cf,aes(x=x,y=y,linetype=parameter))+geom_line()+geom_vline(xintercept=0)+ylab(\"density\")\n    print(p)\n  }else{\n    p = ggplot(cf,aes(x=x,y=y))+geom_line()+\n      facet_wrap(~ parameter, scales=\"free\")+geom_vline(xintercept=0)+ylab(\"density\")\n    print(p)\n  }\n  invisible(cf)\n}\n",
    "created" : 1474969086816.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3543162740",
    "id" : "548ECDD9",
    "lastKnownWriteTime" : 1473339454,
    "last_content_update" : 1473339454,
    "path" : "~/publish/brinla/brinla/R/utilities.R",
    "project_path" : "R/utilities.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}